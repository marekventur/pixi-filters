{"version":3,"file":"pixi-filter-led.min.js","sources":["../src/LedFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './led.frag';\n\n/**\n * This filter applies a led effect, making the container look like it's some sort of public transport display\n *\n * @class\n * @extends PIXI.Filter\n * @param {Object} [config] A configuration object containing settings for the filter.\n * @param {number} [config.size=10] Width/height of the size of each segment\n * @param {number} [config.fill=0.9] How much of every square is filled with the LED. 1.0 means LEDs are touching\n * @param {number} [config.backgroundColor=0x000000] Background color\n * @param {number} [config.backgroundAlpha=1] Background alpha\n * @param {number} [config.intensity=1] Intensity of filter. O means disabled, 0.5 means even mix of original and filtered, 1 means filter only\n */\nexport default class LedFilter extends PIXI.Filter {\n\n    constructor({ size = 10, fill = 0.9, backgroundColor = 0x000000, backgroundAlpha = 1, intensity = 1 } = {}) {\n        super(vertex, fragment);\n\n        this.uniforms.background = new Float32Array([0, 0, 0, 1]);\n\n        this.size = size;\n        this.fill = fill;\n        this.backgroundColor = backgroundColor;\n        this.backgroundAlpha = backgroundAlpha;\n        this.intensity = intensity;\n    }\n\n    /**\n     * Size of each segment\n     *\n     * @member {number}\n     * @default 10\n     */\n    get size() {\n        return this.uniforms.size;\n    }\n    set size(value) {\n        this.uniforms.size = value;\n    }\n\n    /**\n     * How much of every square is filled with the LED. 1.0 means LEDs are touching\n     *\n     * @member {number}\n     * @default 0.9\n     */\n    get fill() {\n        return this.uniforms.fill;\n    }\n    set fill(value) {\n        this.uniforms.fill = value;\n    }\n\n    /**\n     * Background color\n     *\n     * @member {number}\n     * @default 0x000000\n     */\n    get backgroundColor() {\n        return PIXI.utils.rgb2hex(this.uniforms.background);\n    }\n    set backgroundColor(value) {\n        PIXI.utils.hex2rgb(value, this.uniforms.background);\n    }\n\n    /**\n     * Background alpha\n     *\n     * @member {number}\n     * @default 1\n     */\n    get backgroundAlpha() {\n        return this.uniforms.background[3];\n    }\n    set backgroundAlpha(value) {\n        this.uniforms.background[3] = Math.min(1, Math.max(0, value));\n    }\n\n    /**\n     * Intensity of filter. O means disabled, 0.5 means even mix of original and filtered, 1 means filter only\n     *\n     * @member {number}\n     * @default 1\n     */\n    get intensity() {\n        return this.uniforms.intensity;\n    }\n    set intensity(value) {\n        this.uniforms.intensity = value;\n    }\n\n}\n\n// Export to PixiJS namespace\nPIXI.filters.LedFilter = LedFilter;\n"],"names":["LedFilter","ref","super","this","vertex","fragment","uniforms","background","Float32Array","size","fill","backgroundColor","backgroundAlpha","intensity","prototypeAccessors","value","PIXI","utils","rgb2hex","hex2rgb","Math","min","max","Filter","filters"],"mappings":";;;;;;;s7DAeqBA,cAA8B,WAEnCC,kDAAS,gCAAW,2CAAuB,0CAA4B,oCAAe,GAC9FC,OAAMC,KAAAC,EAAQC,GAEdF,KAAKG,SAASC,WAAa,IAAIC,cAAc,EAAG,EAAG,EAAG,IAEtDL,KAAKM,KAAOA,EACZN,KAAKO,KAAOA,EACZP,KAAKQ,gBAAkBA,EACvBR,KAAKS,gBAAkBA,EACvBT,KAAKU,UAAYA,iKASrBC,EAAAL,oBACI,OAAON,KAAKG,SAASG,MAEzBK,EAAAL,kBAASM,GACLZ,KAAKG,SAASG,KAAOM,GASzBD,EAAAJ,oBACI,OAAOP,KAAKG,SAASI,MAEzBI,EAAAJ,kBAASK,GACLZ,KAAKG,SAASI,KAAOK,GASzBD,EAAAH,+BACI,OAAOK,KAAKC,MAAMC,QAAQf,KAAKG,SAASC,aAE5CO,EAAAH,6BAAoBI,GAChBC,KAAKC,MAAME,QAAQJ,EAAOZ,KAAKG,SAASC,aAS5CO,EAAAF,+BACI,OAAOT,KAAKG,SAASC,WAAW,IAEpCO,EAAAF,6BAAoBG,GAChBZ,KAAKG,SAASC,WAAW,GAAKa,KAAKC,IAAI,EAAGD,KAAKE,IAAI,EAAGP,KAS1DD,EAAAD,yBACI,OAAOV,KAAKG,SAASO,WAEzBC,EAAAD,uBAAcE,GACVZ,KAAKG,SAASO,UAAYE,6CA5EKC,KAAKO,QAkF5CP,KAAKQ,QAAQxB,UAAYA"}